// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package respository

import (
	"context"
)

const deleteJob = `-- name: DeleteJob :exec
DELETE FROM jobs
WHERE id = $1
`

func (q *Queries) DeleteJob(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteJob, id)
	return err
}

const insertJob = `-- name: InsertJob :one
INSERT INTO jobs (position, company)
VALUES ($1, $2)
RETURNING id, position, company
`

type InsertJobParams struct {
	Position string
	Company  string
}

func (q *Queries) InsertJob(ctx context.Context, arg InsertJobParams) (Job, error) {
	row := q.db.QueryRow(ctx, insertJob, arg.Position, arg.Company)
	var i Job
	err := row.Scan(&i.ID, &i.Position, &i.Company)
	return i, err
}

const listJobs = `-- name: ListJobs :many
SELECT id, position, company FROM jobs
`

func (q *Queries) ListJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.Query(ctx, listJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(&i.ID, &i.Position, &i.Company); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :exec
UPDATE jobs
SET position = $2, company = $3
WHERE id = $1
`

type UpdateJobParams struct {
	ID       int32
	Position string
	Company  string
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) error {
	_, err := q.db.Exec(ctx, updateJob, arg.ID, arg.Position, arg.Company)
	return err
}
